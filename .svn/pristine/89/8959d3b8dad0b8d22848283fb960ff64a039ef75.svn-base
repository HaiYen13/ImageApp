package com.example.myimageapp.detail;

import android.Manifest;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.Settings;
import android.util.Log;
import android.view.ScaleGestureDetector;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.viewpager.widget.PagerAdapter;
import androidx.viewpager.widget.ViewPager;

import com.example.myimageapp.DowLoadingImageAsyntask;
import com.example.myimageapp.R;
import com.example.myimageapp.model.MovieImageModel;
import com.example.myimageapp.utils.DebugHelper;

import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;

public class DetailActivity extends AppCompatActivity implements ActivityCompat.OnRequestPermissionsResultCallback {
    private ViewPager mViewPager;
    private PagerAdapter mPagerAdapter;
    private Button btnDowLoad;
    private ArrayList<MovieImageModel> list = null;
    int pos = 0;
    private ScaleGestureDetector scaleGestureDetector;
    private float mScaleFactor = 1.0f;


    @Override
    protected void onCreate(@Nullable @org.jetbrains.annotations.Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_detail);
        list = (ArrayList<MovieImageModel>) getIntent().getSerializableExtra("myList");
        pos = getIntent().getIntExtra("position",0);
        initView();
//        setResult();
//        finish();
        btnDowLoad.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (isStoragePermissionGranted()) {
                    new DowLoadingImageAsyntask(DetailActivity.this).execute(list.get(pos).getUrl());
                }
            }
        });

    }

    private final int RQ_WRITE_PERMISSION = 2810;

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable @org.jetbrains.annotations.Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == RQ_WRITE_PERMISSION) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                if (Environment.isExternalStorageManager()) {
                    new DowLoadingImageAsyntask(DetailActivity.this).equals(list.get(pos).getUrl());
                } else {
                    Toast.makeText(DetailActivity.this, "Allow permission for storage access", Toast.LENGTH_SHORT).show();
                }
            }
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull @NotNull String[] permissions, @NonNull @NotNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if(requestCode == RQ_WRITE_PERMISSION){
            if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){
                if(grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED){
                    Log.v("DetaiActivity.PerRes", "Permission: "+permissions[0]+ "was " + grantResults[0]);
                    new DowLoadingImageAsyntask(DetailActivity.this).equals(list.get(pos).getUrl());
                }else {
                        new AlertDialog.Builder(DetailActivity.this).setMessage("You need to enable permision to use this feature").setPositiveButton("Go to settings", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                Intent intent = new Intent();

                                Uri uri = Uri.fromParts("package", DetailActivity.this.getPackageName(), null);
                                intent.setData(uri);
                                startActivityForResult(intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS), RQ_WRITE_PERMISSION);
                            }
                        }).setNegativeButton("Go back", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                DetailActivity.this.initView();
                            }
                        }).show();
                    }
                }
            }
        }
    public boolean isStoragePermissionGranted(){
        int permissionCheck;
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.R){
            return true;
        }else if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){
            if(DetailActivity.this.checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED){
                DebugHelper.logDebug("Permison is granted","");
                return true;
            }else{
                ActivityCompat.requestPermissions(DetailActivity.this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, RQ_WRITE_PERMISSION);
                return false;
            }
        }else
            return true;// android < 6 khong can request permistion
    }

    @Override
    public void onBackPressed() {
        Intent intent = new Intent();
        intent.putExtra("current_position", mViewPager.getCurrentItem());
        setResult(123, intent);
        super.onBackPressed();
    }

    private void initView(){
        mViewPager = findViewById(R.id.vp_view_pager);
        btnDowLoad = findViewById(R.id.btnDL);
        mPagerAdapter = new ViewPagerAdapter(DetailActivity.this, list);
        mViewPager.setAdapter(mPagerAdapter);
        mViewPager.setCurrentItem(pos);

    }
}
