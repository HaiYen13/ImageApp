package com.example.myimageapp;

import android.Manifest;
import android.app.Activity;
import android.content.ContentValues;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Movie;
import android.net.Uri;
import android.net.UrlQuerySanitizer;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Log;
import android.widget.Toast;

import androidx.core.app.ActivityCompat;

import com.example.myimageapp.model.MovieImageModel;
import com.example.myimageapp.utils.DebugHelper;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

import javax.xml.xpath.XPath;

public class DowLoadingImageAsyntask extends AsyncTask<String,String,String> {
    Activity contextParent;

    public DowLoadingImageAsyntask(Activity contextParent) {
        this.contextParent = contextParent;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
    }

    @Override
    protected String doInBackground(String... file_url) {
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.R){
            saveImageToScopedStorage(file_url[0]);
            return null;
        }else{
            saveImageToExternalStorage(file_url[0]);
            return null;
        }
    }

    @Override
    protected void onPostExecute(String s) {
        Toast.makeText(contextParent, "Dowloaded" , Toast.LENGTH_SHORT).show();
    }

    private void saveImageToExternalStorage(String file_url){

        int count;
        try {
            String root = Environment.getExternalStorageDirectory().getAbsolutePath();
            URL url = new URL(file_url);
            URLConnection connection = url.openConnection();
            connection.connect();

            //getting file length
//            int lengthOfFile = connection.getContentLength();
            InputStream inputStream = new BufferedInputStream(url.openStream(), 8192);
            OutputStream outputStream = new FileOutputStream(root + "/"+System.currentTimeMillis()+".jpg");
            byte data[] = new byte[1024];
            long total = 0;
            while ((count = inputStream.read(data)) != -1) {
                total += count;
                outputStream.write(data, 0, count);
            }
            outputStream.flush();
            outputStream.close();
            inputStream.close();
        } catch (Exception e) {
            Log.e("Error", e.getMessage());
        }
    }

    private void saveImageToScopedStorage(String file_url){
        Bitmap bitmap = getBitmapFromURL(file_url);
//        File directory = new File(Environment.DIRECTORY_PICTURES, contextParent.getString(R.string.app_name));
//        OutputStream outputStream;
//        ContentValues values = new ContentValues();
//        values.put(MediaStore.Images.Media.DISPLAY_NAME, (System.currentTimeMillis()/1000)+"_image_scoped_storage.jpg");
//        values.put(MediaStore.Images.Media.MIME_TYPE, "image/jpg");
//
//        values.put(MediaStore.Images.Media.RELATIVE_PATH, directory+File.separator);
//        values.put (MediaStore.Images.Media.IS_PENDING, 1 );
//        Uri uri = contextParent.getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);
//        try{
//            outputStream = contextParent.getContentResolver().openOutputStream(uri);
//            bitmap.compress(Bitmap.CompressFormat.JPEG,100, outputStream);
//            outputStream.close();
//        }catch (FileNotFoundException e) {
//            e.printStackTrace();
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//        contextParent.getContentResolver().update(uri, values, null, null);


        try {
            Uri collection =
                    MediaStore.Images.Media.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY);

            long date = System.currentTimeMillis();
            String extension = "jpg";
            //3
            ContentValues newImage = new ContentValues();
            newImage.put(MediaStore.Images.Media.DISPLAY_NAME, date+"."+extension);
            newImage.put(MediaStore.MediaColumns.MIME_TYPE, "image/"+extension);
            newImage.put(MediaStore.MediaColumns.DATE_ADDED, date);
            newImage.put(MediaStore.MediaColumns.DATE_MODIFIED, date);
            newImage.put(MediaStore.MediaColumns.SIZE, bitmap.getByteCount());
            newImage.put(MediaStore.MediaColumns.WIDTH, bitmap.getWidth());
            newImage.put(MediaStore.MediaColumns.HEIGHT, bitmap.getHeight());
            //4
            newImage.put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_PICTURES+"/MyApp/");
            //5
            newImage.put(MediaStore.Images.Media.IS_PENDING, 1);
            Uri newImageUri = contextParent.getContentResolver().insert(collection, newImage);
            //6
            OutputStream outputStream = contextParent.getContentResolver().openOutputStream(newImageUri, "w");
            bitmap.compress(Bitmap.CompressFormat.JPEG,100, outputStream);
            newImage.clear();
            //7
            newImage.put(MediaStore.Images.Media.IS_PENDING, 0);
            //8
            contextParent.getContentResolver().update(newImageUri, newImage, null, null);
        }catch (Throwable e){
            e.printStackTrace();
        }
    }
    private Bitmap getBitmapFromURL(String file_url){
        try {
            URL url = new URL(file_url);
            URLConnection connection = url.openConnection();
            connection.connect();
            InputStream inputStream = connection.getInputStream();
            Bitmap bitmap = BitmapFactory.decodeStream(inputStream);
            inputStream.close();
            return bitmap;
        }catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

}
